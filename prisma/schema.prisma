// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = "postgresql://postgres.skfboquqkcznojtkmpfi:Suicasuicao02@@aws-0-ap-southeast-1.pooler.supabase.com:5432/postgres"
  directUrl = "postgresql://postgres.skfboquqkcznojtkmpfi:Suicasuicao02@@aws-0-ap-southeast-1.pooler.supabase.com:5432/postgres"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String    @default("student")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  tests         Test[]
  submissions   Submission[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Test {
  id                    String    @id @default(uuid())
  userId                String
  title                 String
  grade                 String?
  subject               String?
  purpose               String?
  description           String?
  configType            String?
  testDuration          Int?
  accessTimeFrom        DateTime?
  accessTimeTo          DateTime?
  allowedTakers         String?
  allowedStudents       String?
  submittedTimes        Int?
  examPassword          String?
  questionAnswerMixed   Boolean   @default(false)
  shuffleQuestionAnswers Boolean  @default(false)
  showPoint             Boolean   @default(false)
  showCorrectAnswerOption String?
  pointToShowAnswer     Int?
  addHeaderInfo         Boolean   @default(false)
  headerInfo            String?
  status                String    @default("draft")
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions Question[]
  submissions Submission[]
}

model Question {
  id        String   @id @default(cuid())
  testId    String   // Foreign key to Test
  text      String
  // Add other question-specific fields here if needed (e.g., type, points)
  
  Test      Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  choices   Choice[]
}

model Choice {
  id         String   @id @default(cuid())
  questionId String   // Foreign key to Question
  text       String
  isCorrect  Boolean  @default(false)

  Question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Submission {
  id        String   @id @default(cuid())
  testId    String   // Foreign key to Test
  userId    String   // Foreign key to User
  score     Int      // Calculated score (e.g., percentage)
  answers   Json     // Store detailed answers, e.g., [{ questionId, chosenChoiceId, isCorrect, correctChoiceId }]
  createdAt DateTime @default(now())

  Test      Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to User who submitted
}
