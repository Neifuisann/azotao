import { render, screen } from '@testing-library/react';
import { describe, it, expect } from 'vitest';
import { Button } from './button'; // Adjust path if necessary

// Basic test suite for the Button component
describe('Button Component', () => {
  it('renders the button with children', () => {
    // Arrange: Render the button with some text
    render(<Button>Click Me</Button>);

    // Act: Find the button by its text content
    const buttonElement = screen.getByRole('button', { name: /click me/i });

    // Assert: Check if the button is in the document
    expect(buttonElement).toBeInTheDocument();
  });

  it('applies the correct variant class', () => {
    // Arrange: Render the button with a specific variant
    render(<Button variant="destructive">Delete</Button>);

    // Act: Find the button
    const buttonElement = screen.getByRole('button', { name: /delete/i });

    // Assert: Check if the button has the expected class for the variant
    // Note: This depends on the exact class names generated by cva/tailwind
    // You might need to inspect the rendered output to get the correct class.
    expect(buttonElement).toHaveClass('bg-destructive'); // Example class
  });

  it('is disabled when the disabled prop is true', () => {
    // Arrange: Render a disabled button
    render(<Button disabled>Disabled Button</Button>);

    // Act: Find the button
    const buttonElement = screen.getByRole('button', { name: /disabled button/i });

    // Assert: Check if the button has the disabled attribute
    expect(buttonElement).toBeDisabled();
  });

  // Add more tests as needed for other props, interactions, etc.
}); 